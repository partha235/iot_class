# access point

try:
    import usocket as socket    # socket module allow us to send response over network.
except:
    import socket
from bps_cre import *
from utime import sleep_ms,sleep
import network 
import gc 
gc.collect()


ssid = 'bps'
password = 'bps12345'  # your network/hotspot/ssid password.

""" in this program I used network with station mode, which mean the board connect
to the network which we programed to connect """
ap = network.WLAN(network.AP_IF)
ap.active(True)
ap.config(essid=ssid, password=password)

# connecting to network.
# sleep(1)
while ap.isconnected()==False:
    pass

print("connection status : ", ap.isconnected())
    


# (IP,Subnet,Gateway,DNS) here i declared that i need my own ip address; where leaving it 
# make auto ip address according to our network.
print(ap.ifconfig())

# creating a web page
def web_page():
    html="""<html>
                <head>
                    <title>Access Point</title>
                    <meta name="viewport" content="width=device-width,initial-scale=1 ">
                    <meta http-equiv="refresh" content="0.1">
                </head>
                    <body style="background-color: rgb(0, 139, 132);">
                    <h1>Access Point</h1>
                    <p style="color:azure">this is an test program to make the microcontroller into 
                                                <b>Access Point Mode</b>. </p>
                    </body>
            </html>"""
    return html

so=socket.socket(socket.AF_INET,socket.SOCK_STREAM) # AF-> Address Family
so.bind(("",80))
so.listen(1)

while True:
  try:
    x.value(not x.value())
    if gc.mem_free() < 102000:
      gc.collect()
    conn, addr = so.accept()
    conn.settimeout(3.0)
    print('Got a connection from %s' % str(addr))
    request = conn.recv(1024)
    conn.settimeout(None)
    request = str(request)
    print('Content = %s' % request)
    response = web_page()
    conn.send('HTTP/1.1 200 OK\n')
    conn.send('Content-Type: text/html\n')
    conn.send('Connection: close\n\n')
    conn.sendall(response)
    conn.close()
    sleep_ms(100)
  except OSError as e:
    conn.close()
    print('Connection closed')